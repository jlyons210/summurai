#!/usr/bin/env python3

"""
Summarize an article using the OpenAI chat completion API
"""

import argparse
import shutil
import textwrap

from bs4 import BeautifulSoup
from openai import OpenAI, OpenAIError
import requests


def configure(args):
    """
    Import configuration

    Returns:
        conf: Configuration
    """

    try:
        conf_values = {}
        with open('summurai.conf', encoding='utf-8') as f:
            for line in f:
                key, value = line.strip().split('=')
                conf_values[key] = value

    except FileNotFoundError:
        conf_values = {
            'openai_api_key': '',
            'openai_chat_model': '',
        }

    conf = {
        'openai_api_key': args.api_key if args.api_key else conf_values['openai_api_key'],
        'openai_chat_model': args.model if args.model else conf_values['openai_chat_model'],
    }

    if conf['openai_api_key'] == '':
        print(
            'You must provide an OpenAI API key, using the --api-key option or by setting the '
            'openai_api_key value in the summurai.conf file.'
        )
        exit(1)

    if conf['openai_chat_model'] == '':
        conf['openai_chat_model'] = 'gpt-3.5-turbo'

    return conf


def get_article(url):
    """
    Get the article from the URL

    Args:
        url: URL of the article

    Returns:
        article: Article text
    """

    response = requests.get(url, timeout=10)
    soup = BeautifulSoup(response.text, 'html.parser')

    title = '# ' + soup.find('h1').get_text()

    content = ''
    for paragraph in soup.find_all('p'):
        content += paragraph.get_text()

    article = title + '\n\n' + content

    return article


def parse_args():
    """
    Parse command line arguments

    Returns:
        args: command line arguments
    """

    parser = argparse.ArgumentParser(
        description='Summarize an article using the OpenAI chat completion API',
    )

    parser.add_argument(
        'url',
        type=str,
        help='URL of the article to summarize',
    )
    parser.add_argument(
        '-a', '--api-key',
        type=str,
        help='OpenAI API key',
    )
    parser.add_argument(
        '-m', '--model',
        type=str,
        help='Chat model to use for summarization',
    )

    args = parser.parse_args()

    return args


def summarize_article(article, conf):
    """
    Summarize the article using the OpenAI chat completion API

    Args:
        article: Article text
        model: Chat model to use for summarization

    Returns:
        summary: Summary of the article
    """

    openai = OpenAI(
        api_key=conf['openai_api_key'],
        max_retries=3,
        timeout=60,
    )

    try:
        response = openai.chat.completions.create(
            model=conf['openai_chat_model'],
            messages=[{
                'role': 'system',
                'content': (
                    'Produce a brief summary and a bullet-point analysis of the following '
                    'article. Sections should include the article headline, a summary of the '
                    'article, and a bulleted list of key points. Following the summary, include '
                    'an "in closing" section that includes some afterthoughts on the content of '
                    'the article, including sentiment.'
                ),
            },
            {
                'role': 'user',
                'content': article,
            }],
        )

    except OpenAIError as e:
        print(f'OpenAI error: {e}')
        exit(1)

    return response.choices[0].message.content

def main():
    """
    Main function
    """

    args                = parse_args()
    conf                = configure(args)
    article             = get_article(args.url)
    summary             = summarize_article(article, conf)
    terminal_width      = shutil.get_terminal_size().columns

    for line in summary.split('\n'):
        print(textwrap.fill(line, width=terminal_width))

    print(
        '\n__\n'
        f'Generated by summurai -- https://github.com/jlyons210/summurai\n'
        f'Original article: {args.url}\n'
        f'Summarized using: {conf["openai_chat_model"]}'
    )

    # print('\n--\nGenerated by summurai -- https://github.com/jlyons210/summurai')


if __name__ == '__main__':
    main()
