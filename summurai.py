#!/usr/bin/env python3

"""
Summarize a webpage using the OpenAI chat completion API
"""

import argparse
import shutil
import sys
import textwrap

from openai import OpenAI, OpenAIError
from requests_html import HTMLSession
from pyppeteer.errors import TimeoutError as PyppeteerTimeoutError


def configure(args):
    """
    Import configuration

    Args:
        args: Command line arguments

    Returns:
        conf: Configuration
    """

    try:
        conf_values = {}
        with open('summurai.conf', encoding='utf-8') as f:
            for line in f:
                key, value = line.strip().split('=')
                conf_values[key] = value

    except FileNotFoundError:
        conf_values = {
            'openai_api_key': '',
            'openai_chat_model': '',
        }

    conf = {
        'openai_api_key': args.api_key if args.api_key else conf_values['openai_api_key'],
        'openai_chat_model': args.model if args.model else conf_values['openai_chat_model'],
    }

    if conf['openai_api_key'] == '':
        print(
            'You must provide an OpenAI API key, using the --api-key option or by setting the '
            'openai_api_key value in the summurai.conf file.'
        )
        exit(1)

    if conf['openai_chat_model'] == '':
        conf['openai_chat_model'] = 'gpt-4-turbo-preview'

    return conf


def get_webpage(url):
    """
    Get page content from the webpage URL
    
    Args:
        url: Webpage URL
        
    Returns:
        page_content: Webpage content
    """

    print('Retrieving page content...', file=sys.stderr)

    session = HTMLSession()
    response = session.get(url)

    try:
        response.html.render(timeout=3)
    except PyppeteerTimeoutError:
        pass

    session.close()

    page_title = ''
    for h1 in response.html.find('h1'):
        if h1.text.strip() != '':
            page_title = h1.text
            break

    page_paragraphs = ''
    for p in response.html.find('p'):
        if p.text.strip() != '':
            page_paragraphs += p.text + '\n\n'

    # if 'captcha' in response.html.html.lower():
    #     print('Could not retrieve page. Is there a CAPTCHA?', file=sys.stderr)
    #     exit(1)

    if page_paragraphs.strip() == '':
        print('Could not retrieve page. Is there a paywall?', file=sys.stderr)
        exit(1)

    page_content = page_title + '\n\n' + page_paragraphs

    return page_content


def parse_args():
    """
    Parse command line arguments

    Returns:
        args: command line arguments
    """

    parser = argparse.ArgumentParser(
        description='Summarize a webpage using the OpenAI chat completion API',
    )
    parser.add_argument(
        'url',
        type=str,
        help='URL of the webpage to summarize',
    )
    parser.add_argument(
        '-a', '--api-key',
        type=str,
        help='OpenAI API key',
    )
    parser.add_argument(
        '-m', '--model',
        type=str,
        help='Chat model to use for summarization',
    )

    args = parser.parse_args()
    return args


def summarize_webpage(page_content, conf):
    """
    Summarize the webpage content using the OpenAI chat completion API

    Args:
        page_content: Page content
        conf: Configuration

    Returns:
        summary: Summary of the webpage
    """

    print('Summarizing page...', file=sys.stderr)

    openai = OpenAI(
        api_key=conf['openai_api_key'],
        max_retries=3,
        timeout=60,
    )

    try:
        response = openai.chat.completions.create(
            model=conf['openai_chat_model'],
            messages=[{
                'role': 'system',
                'content': (
                    'Produce a summary of the following article. Sections should include the '
                    'article headline, a brief summary of the article, and a bulleted list of 3-4 '
                    'key points. Following the summary, include an "in closing" section that '
                    'includes some afterthoughts on the content of the article, including '
                    'sentiment and its impact on society.'
                ),
            },
            {
                'role': 'user',
                'content': page_content,
            }],
        )

    except OpenAIError as e:
        print(f'OpenAI error: {e}')
        exit(1)

    summary = response.choices[0].message.content
    return summary


def main():
    """
    Main function
    """

    args                = parse_args()
    conf                = configure(args)
    page_content        = get_webpage(args.url)
    summary             = summarize_webpage(page_content, conf)
    terminal_width      = shutil.get_terminal_size().columns

    for line in summary.split('\n'):
        print(textwrap.fill(line, width=terminal_width))

    print(
        '\n__\n'
        f'Generated by summurai -- https://github.com/jlyons210/summurai\n'
        f'Source page URL: {args.url}\n'
        f'Summarized using: {conf["openai_chat_model"]}'
    )


if __name__ == '__main__':
    main()
